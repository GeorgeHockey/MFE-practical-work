{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "source": [
    "First function in MFE Practical Work 2 assignment\n",
    "\n",
    "Designed to take a daily price pandas series\n",
    "\n",
    "Returns a pandas dataframe of mean, std_dev, skew, kurt: \n",
    "\n",
    "Sampled from daily, weekly, monthly and annual data"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "Points\n",
    "\n",
    " - Mean has small differences due to sampling mechanics\n",
    "\n",
    " - standard deviation differs slightly - most likely due to macro movements\n",
    "\n",
    " - Kurtosis and skew much larger at smaller intervals: this seems too great\n",
    " \n",
    " - Larger numbers in general due to singe stock movements - FTSE 100 is smaller "
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def summary_statistics(prices):\n",
    "\n",
    "    # Convert prices to returns\n",
    "    returns = prices.pct_change()\n",
    "\n",
    "    # Resample returns, using .sum()\n",
    "    #  *100 to give % values  \n",
    "    d_returns = returns * 100\n",
    "    w_returns = returns.resample(\"W-FRI\").sum() * 100\n",
    "    m_returns = returns.resample(\"M\").sum() * 100\n",
    "    q_returns = returns.resample(\"Q\").sum() * 100\n",
    "\n",
    "    # Enclosed function to find mean, std, skew and kurt: gives annualised stats\n",
    "    def process(returns, n):\n",
    "        returns_mu = returns.mean()                         # mean returns per time period\n",
    "        annual_mu = returns_mu * n                          # annualised mean returns\n",
    "\n",
    "        returns_err = returns - returns_mu       \n",
    "        returns_var = (returns_err ** 2).mean()             # average squared return ( 2nd moment)\n",
    "        annual_var = returns_var * n                        # annual rescaled variance\n",
    "        annual_std = np.sqrt(annual_var)                    # annual rescaled std deviation\n",
    "\n",
    "        returns_mom3 = (returns_err ** 3).mean()\n",
    "        returns_mom4 = (returns_err ** 4).mean()            # Third and Fourth moments\n",
    "\n",
    "\n",
    "        annual_skew = (returns_mom3 / returns_var ** (3/2)) * np.sqrt(n)  # rescaled Skew and Kurtosis\n",
    "        annual_kurt = (returns_mom4 / returns_var ** (4/2)) * n\n",
    "\n",
    "        returns_stats = pd.Series([annual_mu, annual_std, annual_skew, annual_kurt], index = [\"mean\", \"std\", \"skew\", \"kurt\"])\n",
    "        \n",
    "        return returns_stats\n",
    "         \n",
    "    # Feed in daily, weekly, monthly and quarterly data\n",
    "    d_stats = process(d_returns, 252).rename(\"Daily\")\n",
    "    w_stats = process(w_returns, 52 ).rename(\"Weekly\")\n",
    "    m_stats = process(m_returns, 12 ).rename(\"Monthly\")\n",
    "    q_stats = process(q_returns, 4  ).rename(\"Quarterly\")\n",
    "\n",
    "    # Concatenate the series\n",
    "    stats = pd.concat([d_stats, w_stats, m_stats, q_stats], axis=1,)\n",
    "\n",
    "    return stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "aapl = pd.read_csv(\"data/aapl.csv\", parse_dates=True, index_col=\"Date\")\n",
    "aapl_close = aapl[\"Close\"]\n",
    "\n",
    "sbry_1 = pd.read_csv(\"data/SBRY_1Y.csv\", parse_dates=True, index_col=\"Date\")\n",
    "sbry_1 = sbry_1[\"Close\"]\n",
    "\n",
    "sbry_10 = pd.read_csv(\"data/SBRY_10Y.csv\", parse_dates=True, index_col=\"Date\")\n",
    "sbry_10 = sbry_10[\"Close\"]\n",
    "\n",
    "FTSE = pd.read_csv(\"data/^FTSE.csv\", parse_dates=True, index_col=\"Date\")\n",
    "FTSE = FTSE[\"Close\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "            Daily      Weekly    Monthly  Quarterly\n",
       "mean    28.538662   28.289407  28.425414  28.425414\n",
       "std     24.374321   24.607536  26.623630  28.637370\n",
       "skew    -4.757964   -1.657068  -2.246333  -2.539100\n",
       "kurt  1926.154100  259.886859  39.946341  19.050505"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Daily</th>\n      <th>Weekly</th>\n      <th>Monthly</th>\n      <th>Quarterly</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mean</th>\n      <td>28.538662</td>\n      <td>28.289407</td>\n      <td>28.425414</td>\n      <td>28.425414</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>24.374321</td>\n      <td>24.607536</td>\n      <td>26.623630</td>\n      <td>28.637370</td>\n    </tr>\n    <tr>\n      <th>skew</th>\n      <td>-4.757964</td>\n      <td>-1.657068</td>\n      <td>-2.246333</td>\n      <td>-2.539100</td>\n    </tr>\n    <tr>\n      <th>kurt</th>\n      <td>1926.154100</td>\n      <td>259.886859</td>\n      <td>39.946341</td>\n      <td>19.050505</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 255
    }
   ],
   "source": [
    "summary_statistics(aapl_close)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "            Daily      Weekly    Monthly  Quarterly\n",
       "mean    -5.979325   -5.843228  -5.955597  -5.955597\n",
       "std     30.837179   29.356705  30.292363  23.630928\n",
       "skew   -54.359123   -9.026684  -2.100969  -0.332872\n",
       "kurt  8692.463139  463.854233  32.750841   5.518090"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Daily</th>\n      <th>Weekly</th>\n      <th>Monthly</th>\n      <th>Quarterly</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mean</th>\n      <td>-5.979325</td>\n      <td>-5.843228</td>\n      <td>-5.955597</td>\n      <td>-5.955597</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>30.837179</td>\n      <td>29.356705</td>\n      <td>30.292363</td>\n      <td>23.630928</td>\n    </tr>\n    <tr>\n      <th>skew</th>\n      <td>-54.359123</td>\n      <td>-9.026684</td>\n      <td>-2.100969</td>\n      <td>-0.332872</td>\n    </tr>\n    <tr>\n      <th>kurt</th>\n      <td>8692.463139</td>\n      <td>463.854233</td>\n      <td>32.750841</td>\n      <td>5.518090</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 256
    }
   ],
   "source": [
    "summary_statistics(sbry_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "            Daily      Weekly    Monthly  Quarterly\n",
       "mean    -0.156677   -0.156140  -0.156959  -0.156959\n",
       "std     24.952721   23.945518  21.392437  20.419585\n",
       "skew    -2.072475   -2.223145   0.264286   0.453413\n",
       "kurt  4342.802645  299.008351  61.924148  15.765948"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Daily</th>\n      <th>Weekly</th>\n      <th>Monthly</th>\n      <th>Quarterly</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mean</th>\n      <td>-0.156677</td>\n      <td>-0.156140</td>\n      <td>-0.156959</td>\n      <td>-0.156959</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>24.952721</td>\n      <td>23.945518</td>\n      <td>21.392437</td>\n      <td>20.419585</td>\n    </tr>\n    <tr>\n      <th>skew</th>\n      <td>-2.072475</td>\n      <td>-2.223145</td>\n      <td>0.264286</td>\n      <td>0.453413</td>\n    </tr>\n    <tr>\n      <th>kurt</th>\n      <td>4342.802645</td>\n      <td>299.008351</td>\n      <td>61.924148</td>\n      <td>15.765948</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 257
    }
   ],
   "source": [
    "summary_statistics(sbry_10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "            Daily      Weekly    Monthly  Quarterly\n",
       "mean    12.664971   12.376700  12.614713  12.614713\n",
       "std     11.734284   10.572372   9.676764   5.904805\n",
       "skew    -6.408026   -1.726791  -3.819944   1.517633\n",
       "kurt  1278.319177  141.175327  32.764912   8.486901"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Daily</th>\n      <th>Weekly</th>\n      <th>Monthly</th>\n      <th>Quarterly</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mean</th>\n      <td>12.664971</td>\n      <td>12.376700</td>\n      <td>12.614713</td>\n      <td>12.614713</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>11.734284</td>\n      <td>10.572372</td>\n      <td>9.676764</td>\n      <td>5.904805</td>\n    </tr>\n    <tr>\n      <th>skew</th>\n      <td>-6.408026</td>\n      <td>-1.726791</td>\n      <td>-3.819944</td>\n      <td>1.517633</td>\n    </tr>\n    <tr>\n      <th>kurt</th>\n      <td>1278.319177</td>\n      <td>141.175327</td>\n      <td>32.764912</td>\n      <td>8.486901</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 258
    }
   ],
   "source": [
    "summary_statistics(FTSE)"
   ]
  }
 ]
}